_GROVER_ ← {
     ⍝ Grover algorithm. 
     ⍝ Takes a vector state in the 0 state (all qubits are in the 0 states).
     ⍝ Applies the algorithm with the passed oracle and returns the vector state without being measured.
     ⍝ https://learning.quantum.ibm.com/tutorial/grovers-algorithm

     ⍝ ⍵: Initial vector state in the 0 state.
     ⍝ ⍺: Element to find

    X ← #.quapl.gates.X
    H ← #.quapl.gates.H
    CNOT ← #.quapl.gates.CNOT
    SWAP ← #.quapl.gates.SWAP
    stage ← #.quapl.circuit.stage
    apply_gate ← #.quapl.utils.apply_gate
    phase ← #.quapl.oracles.Grover.phase

    
    n_qubits ← (2⍟1⌷⍴⍵)
    r ← (○1 × n_qubits*0.5) ÷ 4

    ⍝ Uniform superposition 
    stg_ctrl ← (((⍳n_qubits)-1) ({H}¨⍳n_qubits))    
    mid_state ← stg_ctrl stage ⍵

    ⍝ iter ← {
        ⍝ Oracle  
        mid_state ← ⍺ phase mid_state

        ⍝ Difusser
        stg_ctrl ← (((⍳n_qubits)-1) ({H}¨⍳n_qubits))
        mid_state ← stg_ctrl stage mid_state

        stg_ctrl ← (((⍳n_qubits)-1) ({X}¨⍳n_qubits))
        mid_state ← stg_ctrl stage mid_state

        stg_ctrl ← (((⍳n_qubits)-1) (({I}¨( ¯1↓(⍳n_qubits))) , ⊂H ) )
        mid_state ← stg_ctrl stage mid_state

        cx ← (n_qubits-1) #.quapl.gates.gCTR (#.quapl.gates.X) 
        mid_state  ← cx +.× mid_state

        stg_ctrl ← (((⍳n_qubits)-1) (({I}¨( ¯1↓(⍳n_qubits))) , ⊂H ) )
        mid_state ← stg_ctrl stage mid_state

        stg_ctrl ← (((⍳n_qubits)-1) ({X}¨⍳n_qubits))
        mid_state ← stg_ctrl stage mid_state

        stg_ctrl ← (((⍳n_qubits)-1) ({H}¨⍳n_qubits))
        mid_state ← stg_ctrl stage mid_state
        mid_state
    ⍝ }
}



